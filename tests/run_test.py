import pytest

import populate_tables


@pytest.fixture
def patient():
    return {
        'id': 'e2309dce-a235-4624-af3c-ad209843fe93', 'meta': {'tag': [
            {'code': 'synthea-7-2017',
             'system': 'https://smarthealthit.org/tags'}],
            'profile': [
                'http://standardhealthrecord.org/fhir/StructureDefinition/shr-demographics-PersonOfRecord'],
            'versionId': '1',
            'lastUpdated': '2018-10-04T20:23:48.214-04:00'},
        'name': [
            {'use': 'official', 'given': ['Teena'], 'family': 'Zulauf',
             'prefix': ['Mrs.']},
            {'use': 'maiden', 'given': ['Teena'], 'family': 'Lind'}],
        'text': {
            'div': '<div xmlns="http://www.w3.org/1999/xhtml">Generated by <a href="https://github.com/synthetichealth/synthea">Synthea</a>. Version identifier: 1a8d765a5375bf72f3b7a92001940d05a6f21189</div>',
            'status': 'generated'}, 'gender': 'female', 'address': [
            {'city': 'Braintree Town',
             'line': ['7784 Parisian Court', 'Apt. 185'],
             'state': 'MA', 'country': 'US', 'extension': [
                {'url': 'http://hl7.org/fhir/StructureDefinition/geolocation',
                 'extension': [
                     {'url': 'latitude', 'valueDecimal': 42.22673411821282},
                     {'url': 'longitude',
                      'valueDecimal': -71.0330665780054}]}],
             'postalCode': '02184'}], 'telecom': [
            {'use': 'home', 'value': '1-387-088-9771 x3682',
             'system': 'phone'}],
        'birthDate': '1961-12-24', 'extension': [
            {
                'url': 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-race',
                'valueCodeableConcept': {'text': 'race', 'coding': [
                    {'code': '2106-3', 'system': 'http://hl7.org/fhir/v3/Race',
                     'display': 'White'}]}}, {
                'url': 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity',
                'valueCodeableConcept': {'text': 'ethnicity', 'coding': [
                    {'code': '2186-5',
                     'system': 'http://hl7.org/fhir/v3/Ethnicity',
                     'display': 'Nonhispanic'}]}},
            {'url': 'http://hl7.org/fhir/StructureDefinition/birthPlace',
             'valueAddress': {'city': 'Westborough', 'state': 'MA',
                              'country': 'US'}},
            {
                'url': 'http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName',
                'valueString': 'Nerissa Kunde'},
            {
                'url': 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex',
                'valueCode': 'F'}, {
                'url': 'http://hl7.org/fhir/StructureDefinition/patient-interpreterRequired',
                'valueBoolean': False}, {
                'url': 'http://standardhealthrecord.org/fhir/StructureDefinition/shr-actor-FictionalPerson-extension',
                'valueBoolean': True}, {
                'url': 'http://standardhealthrecord.org/fhir/StructureDefinition/shr-demographics-FathersName-extension',
                'valueHumanName': {'text': 'Desmond Lind'}}, {
                'url': 'http://standardhealthrecord.org/fhir/StructureDefinition/shr-demographics-SocialSecurityNumber-extension',
                'valueString': '999-43-9149'}], 'identifier': [
            {'value': '1f508e69-000f-4bb8-b157-4a68cfbeb1fb',
             'system': 'https://github.com/synthetichealth/synthea'},
            {'type': {
                'coding': [
                    {'code': 'SB',
                     'system': 'http://hl7.org/fhir/identifier-type'}]},
                'value': '999439149',
                'system': 'http://hl7.org/fhir/sid/us-ssn'},
            {'type': {
                'coding': [
                    {'code': 'DL', 'system': 'http://hl7.org/fhir/v2/0203'}]},
                'value': 'S99948473',
                'system': 'urn:oid:2.16.840.1.113883.4.3.25'}, {
                'type': {
                    'coding': [{'code': 'PPN',
                                'system': 'http://hl7.org/fhir/v2/0203'}]},
                'value': 'X44974978X',
                'system': 'http://standardhealthrecord.org/fhir/StructureDefinition/passportNumber'},
            {'type': {
                'coding': [
                    {'code': 'MR', 'system': 'http://hl7.org/fhir/v2/0203'}]},
                'value': '1f508e69-000f-4bb8-b157-4a68cfbeb1fb',
                'system': 'http://hospital.smarthealthit.org'}],
        'resourceType': 'Patient', 'communication': [{'language': {
            'coding': [
                {'code': 'en-US',
                 'system': 'http://hl7.org/fhir/ValueSet/languages',
                 'display': 'English (United States)'}]}}],
        'maritalStatus': {'text': 'M', 'coding': [{'code': 'M',
                                                   'system': 'http://hl7.org/fhir/v3/MaritalStatus'}]},
        'multipleBirthBoolean': False
    }


def test_patient(patient):
    expected_result = {
        'source_id': 'e2309dce-a235-4624-af3c-ad209843fe93',
        'birth_date': '1961-12-24', 'gender': 'female',
        'race_code': '2106-3',
        'race_code_system': 'http://hl7.org/fhir/v3/Race',
        'ethnicity_code': '2186-5',
        'ethnicity_code_system': 'http://hl7.org/fhir/v3/Ethnicity',
        'country': 'US'
    }

    result = {}
    populate_tables._handle_patient_fields(patient, result)

    assert expected_result == result


@pytest.fixture
def encounter():
    return {
        'id': '273275b7-dd3e-4bcb-b893-35f5248438b2', 'meta': {'tag': [
            {'code': 'synthea-7-2017',
             'system': 'https://smarthealthit.org/tags'}], 'profile': [
            'http://standardhealthrecord.org/fhir/StructureDefinition/shr-encounter-Encounter'],
            'versionId': '1',
            'lastUpdated': '2018-10-04T20:23:50.974-04:00'},
        'type': [{'text': 'Patient-initiated encounter', 'coding': [
            {'code': '270427003', 'system': 'http://snomed.info/sct'}]}],
        'class': {'code': 'ambulatory'},
        'period': {'end': '2008-08-21T17:50:07-04:00',
                   'start': '2008-08-21T17:50:07-04:00'}, 'reason': [{
            'coding': [
                {
                    'code': '72892002',
                    'system': 'http://snomed.info/sct',
                    'display': 'Normal pregnancy'}]}],
        'status': 'finished', 'subject': {
            'reference': 'Patient/e2309dce-a235-4624-af3c-ad209843fe93'},
        'resourceType': 'Encounter', 'serviceProvider': {
            'reference': 'Organization/b1242f7f-cb3b-4fef-96ee-125758800754'}
    }


def test_encounter(encounter):
    expected_result = {
        'source_id': '273275b7-dd3e-4bcb-b893-35f5248438b2',
        'start_date': '2008-08-21T17:50:07-04:00',
        'end_date': '2008-08-21T17:50:07-04:00',
        'type_code': '270427003',
        'type_code_system': 'http://snomed.info/sct'
    }

    result = {}

    populate_tables._handle_encounter_fields(encounter, result)

    assert expected_result == result


@pytest.fixture
def procedure():
    return {
        'id': '180382',
        'code': {'text': 'Documentation of current medications', 'coding': [
            {'code': '428191000124101', 'system': 'http://snomed.info/sct',
             'display': 'Documentation of current medications'}]}, 'meta': {
            'tag': [{'code': 'synthea-7-2017',
                     'system': 'https://smarthealthit.org/tags'}], 'profile': [
                'http://standardhealthrecord.org/fhir/StructureDefinition/shr-procedure-Procedure'],
            'versionId': '1', 'lastUpdated': '2018-10-04T20:23:47.743-04:00'},
        'status': 'completed', 'context': {
            'reference': 'Encounter/fb1f4ee4-d1cc-4a25-b2f0-c874cec957d9'},
        'subject': {
            'reference': 'Patient/e2309dce-a235-4624-af3c-ad209843fe93'},
        'extension': [{
                          'url': 'http://standardhealthrecord.org/fhir/StructureDefinition/shr-core-CodeableConcept-extension',
                          'valueCodeableConcept': {
                              'text': 'Documentation of current medications',
                              'coding': [{'code': '428191000124101',
                                          'system': 'http://snomed.info/sct',
                                          'display': 'Documentation of current medications'}]}}],
        'resourceType': 'Procedure',
        'performedDateTime': '2017-01-24T05:36:38-05:00'}


def test_procedure(procedure):
    expected_result = {
        'source_id': '180382',
        'procedure_date': '2017-01-24T05:36:38-05:00',
        'type_code': '428191000124101',
        'type_code_system': 'http://snomed.info/sct'
    }

    result = {}

    populate_tables._handle_procedure_fields(procedure, result)

    assert expected_result == result


@pytest.fixture
def observation():
    return {
        'id': '0f08874b-355b-4d6a-b230-0f2881decf87',
        'code': {'text': 'Triglycerides', 'coding': [
            {'code': '2571-8', 'system': 'http://loinc.org',
             'display': 'Triglycerides'}]}, 'meta': {'tag': [
            {'code': 'synthea-7-2017',
             'system': 'https://smarthealthit.org/tags'}], 'profile': [
            'http://standardhealthrecord.org/fhir/StructureDefinition/shr-observation-Observation'],
                                                     'versionId': '1',
                                                     'lastUpdated': '2018-10-04T20:23:50.943-04:00'},
        'issued': '2007-08-21T02:59:32-04:00', 'status': 'final', 'context': {
            'reference': 'Encounter/815cedee-017d-48d8-bd29-af2cb45a605e'},
        'subject': {
            'reference': 'Patient/e2309dce-a235-4624-af3c-ad209843fe93'},
        'category': [{'coding': [{'code': 'laboratory',
                                  'system': 'http://hl7.org/fhir/observation-category'}]}],
        'resourceType': 'Observation',
        'valueQuantity': {'code': 'mg/dL', 'unit': 'mg/dL', 'value': 144,
                          'system': 'http://unitsofmeasure.org/'},
        'effectiveDateTime': '2007-08-21T02:59:32-04:00'}


def test_observation(observation):
    expected_result = {
        'source_id': '0f08874b-355b-4d6a-b230-0f2881decf87',
        'observation_date': '2007-08-21T02:59:32-04:00',
        'type_code': '2571-8',
        'type_code_system': 'http://loinc.org',
        'patient_id': 8,
        'value': 144,
        'unit_code': 'mg/dL',
        'unit_code_system': 'http://unitsofmeasure.org/'
    }

    result = {}

    obligatory_fields = {'source_id', 'patient_id', 'observation_date',
                         'type_code', 'type_code_system', 'value'}

    populate_tables._handle_observation_fields(observation, result)

    result['patient_id'] = 8
    all_obligatory_fields = populate_tables._check_all_obligatory_fields_present(
            obligatory_fields, result)


    assert expected_result == result
    assert all_obligatory_fields is True


@pytest.fixture
def observation_with_component():
    return {
        'id': 'd0146f86-afd1-4557-9ab4-002c04b02f5b', 'code': {'coding': [
            {'code': '55284-4', 'system': 'http://loinc.org',
             'display': 'Blood Pressure'}]}, 'meta': {'tag': [
            {'code': 'synthea-7-2017',
             'system': 'https://smarthealthit.org/tags'}], 'profile': [
            'http://standardhealthrecord.org/fhir/StructureDefinition/shr-observation-Observation',
            'http://standardhealthrecord.org/fhir/StructureDefinition/shr-vital-BloodPressure'],
                                                      'versionId': '1',
                                                      'lastUpdated': '2018-10-04T20:23:50.156-04:00'},
        'issued': '2014-10-11T07:10:55-04:00', 'status': 'final', 'context': {
            'reference': 'Encounter/d24517f1-b7c9-4bc8-93ef-a1b4e86f4bce'},
        'subject': {
            'reference': 'Patient/e2309dce-a235-4624-af3c-ad209843fe93'},
        'category': [{'coding': [{'code': 'vital-signs',
                                  'system': 'http://hl7.org/fhir/observation-category'}]}],
        'component': [{'code': {'text': 'Systolic Blood Pressure', 'coding': [
            {'code': '8480-6', 'system': 'http://loinc.org',
             'display': 'Systolic Blood Pressure'}]},
                       'valueQuantity': {'code': 'mmHg', 'unit': 'mmHg',
                                         'value': 121,
                                         'system': 'http://unitsofmeasure.org/'}},
                      {'code': {'text': 'Diastolic Blood Pressure', 'coding': [
                          {'code': '8462-4', 'system': 'http://loinc.org',
                           'display': 'Diastolic Blood Pressure'}]},
                       'valueQuantity': {'code': 'mmHg', 'unit': 'mmHg',
                                         'value': 82,
                                         'system': 'http://unitsofmeasure.org/'}}],
        'resourceType': 'Observation',
        'effectiveDateTime': '2014-10-11T07:10:55-04:00'}


def test_observation_with_component(observation_with_component):
    expected_result = [
        {
            'source_id': 'd0146f86-afd1-4557-9ab4-002c04b02f5b',
            'observation_date': '2014-10-11T07:10:55-04:00',
            'type_code': '8480-6',
            'type_code_system': 'http://loinc.org',
            'value': 121,
            'unit_code': 'mmHg',
            'unit_code_system': 'http://unitsofmeasure.org/'
        },
        {
            'source_id': 'd0146f86-afd1-4557-9ab4-002c04b02f5b',
            'observation_date': '2014-10-11T07:10:55-04:00',
            'type_code': '8462-4',
            'type_code_system': 'http://loinc.org',
            'value': 82,
            'unit_code': 'mmHg',
            'unit_code_system': 'http://unitsofmeasure.org/'
        }
    ]

    final_result = []

    for component in observation_with_component['component']:
        result = {}
        populate_tables._handle_observation_fields_with_component(
            observation_with_component, result, component)

        final_result.append(result)

    assert expected_result == final_result


@pytest.fixture
def skipped_observation():
    return {
        "id": "2914a8dc-4726-48a1-9c4c-603779ce9dc8",
        "code": {"text": "Housing status", "coding": [
            {"code": "71802-3", "system": "http://loinc.org",
             "display": "Housing status"}]}, "meta": {"tag": [
            {"code": "synthea-7-2017",
             "system": "https://smarthealthit.org/tags"}], "profile": [
            "http://standardhealthrecord.org/fhir/StructureDefinition/shr-observation-Observation",
            "http://standardhealthrecord.org/fhir/StructureDefinition/shr-observation-SocialHistory"],
                                                      "versionId": "1",
                                                      "lastUpdated": "2018-10-04T20:20:45.552-04:00"},
        "issued": "2014-07-13T10:19:53-04:00", "status": "final", "context": {
            "reference": "Encounter/b3614366-70b2-4e4d-ba90-f0fe3bc5ca2f"},
        "subject": {
            "reference": "Patient/ca7a3261-7e9e-401d-a346-7f258683b0f7"},
        "category": [{"coding": [{"code": "social-history",
                                  "system": "http://hl7.org/fhir/observation-category"}]},
                     {"coding": [{"code": "C2004062",
                                  "system": "http://ncimeta.nci.nih.gov"}]}],
        "valueString": "Patient is homeless", "resourceType": "Observation",
        "effectiveDateTime": "2014-07-13T10:19:53-04:00"}

def test_skipped_observation(skipped_observation):

    result = {}
    obligatory_fields = {'source_id', 'patient_id', 'observation_date',
                         'type_code', 'type_code_system', 'value'}

    populate_tables._handle_observation_fields(skipped_observation, result)

    result['patient_id'] = 8

    all_obligatory_fields = populate_tables._check_all_obligatory_fields_present(
                obligatory_fields, result)

    assert all_obligatory_fields is False


if __name__ == '__main__':
    pytest.main()